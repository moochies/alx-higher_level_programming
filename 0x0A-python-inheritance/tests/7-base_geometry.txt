The ``BaseGeometry module`` module
======================

Using ``BaseGeometry``
-------------------

Importing the class from the module:
        >>> BaseGeometry = __import__("7-base_geometry").BaseGeometry
	>>> b = BaseGeometry()
	>>> b.area()
	Traceback (most recent call last):
		...
	Exception: area() is not implemented

	>>> b.integer_validator("Distance", 12)
	>>> b.integer_validator("Width", -2)
	Traceback (most recent call last):
		...
	ValueError: Width must be greater than 0

	>>> b.integer_validator("height", "x")
	Traceback (most recent call last):
		...
	TypeError: height must be an integer

	>>> b.integer_validator()
	Traceback (most recent call last):
		...
	TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'
	>>> b.integer_validator("length")
	Traceback (most recent call last):
		...
	TypeError: integer_validator() missing 1 required positional argument: 'value'

	>>> b.integer_validator(None, None)
	Traceback (most recent call last):
		...
	TypeError: None must be an integer
	>>> b.integer_validator(None)
	Traceback (most recent call last):
		...
	TypeError: integer_validator() missing 1 required positional argument: 'value'
	>>> b.integer_validator("x", 7, 8)
	Traceback (most recent call last):
		...
	TypeError: integer_validator() takes 3 positional arguments but 4 were given
	>>> b.area(2)
	Traceback (most recent call last):
		...
	TypeError: area() takes 1 positional argument but 2 were given
	>>> b.integer_validator("x", [1, 2, 3])
	Traceback (most recent call last):
		...
	TypeError: x must be an integer
	>>> b.integer_validator("days", "100")
	Traceback (most recent call last):
		...
	TypeError: days must be an integer
	>>> b.integer_validator("y", (1, 7))
	Traceback (most recent call last):
		...
	TypeError: y must be an integer
	>>> b.integer_validator("j", {"a": 1, "b": 19})
	Traceback (most recent call last):
		...
	TypeError: j must be an integer
